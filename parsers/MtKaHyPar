# -*-awk-*-
BEGIN {
    header()
    reset()
}

/__BEGIN_FILE__/ {
    sub(/__BEGIN_FILE__ /, "", $0)
    split($0, parts, "___")

    data["Graph"] = parts[1]
    data["NumNodes"] = 1
    data["NumMPIsPerNode"] = 1
    data["NumThreadsPerMPI"] = -1
    data["Seed"] = -1
    data["Epsilon"] = 0.03

    split(parts[2], parts, "_")
    for (i in parts) {
        if (match(parts[i], /k([0-9]+)/, m)) {
            data["K"] = m[1]
        } else if (match(parts[i], /P([0-9]+)x([0-9]+)x([0-9]+)/, m)) {
            data["NumNodes"] = m[1]
            data["NumMPIsPerNode"] = m[2]
            data["NumThreadsPerMPI"] = m[3]
        } else if (match(parts[i], /seed([0-9]+)/, m)) {
            data["Seed"] = m[1]
        } else if (match(parts[i], /eps([0-9\.\-e]+)/, m)) {
            data["Epsilon"] = m[1]
        }
    }
}

/__END_FILE__/ {
    yield()
}

match($0, /  Hypergraph:.*\/(([^\/]+)\.(graph|hgr))$/, m) {
    data["Graph"] = m[2]
}

match($0, /  k: *([0-9]+)/, m) {
    data["K"] = m[1]
}

match($0, /  epsilon: *([0-9\.e\-]+)/, m) {
    data["Epsilon"] = m[1]
}

match($0, /  seed: *([0-9]+)/, m) {
    data["Seed"] = m[1]
}

match($0, /  Number of Threads: *([0-9]+)/, m) {
    data["NumThreadsPerMPI"] = m[1]
}

match($0, /  Partitioning Time *= ([0-9\.e\-]+) s/, m) {
    data["Time"] = m[1]
}

match($0, /  Imbalance *= ([0-9\.e\-]+)/, m) {
    data["Balance"] = m[1]
}

match($0, /  cut.*= ([0-9]+)/, m) {
    data["Cut"] = m[1]
}

match($0, /  km1.*= ([0-9]+)/, m) {
    data["KM1"] = m[1]
}

match($0, /.*initial_km1=([0-9]+)/, m) {
    data["InitialKM1"] = m[1]
}

match($0, /.*initial_cut=([0-9]+)/, m) {
    data["InitialCut"] = m[1]
}

match($0, /.*initial_num_edges=([0-9]+)/, m) {
    data["InitialNumEdges"] = m[1]
}

match($0, /.*initial_num_nodes=([0-9]+)/, m) {
    data["InitialNumNodes"] = m[1]
}

match($0, /.*nr_multilevels=([0-9]+)/, m) {
    data["NumMultilevels"] = m[1]
}

match($0, /.*total_e_weight_of_coarsest_graph=([0-9]+)/, m) {
    data["TotalEdgeWeightOfCoarsestGraph"] = m[1]
}

match($0, /.*level_2_numHEs=([0-9]+)/, m) {
    data["Level2NumHEs"] = m[1]
}

match($0, /.*level_2_numHNs=([0-9]+)/, m) {
    data["Level2NumHNs"] = m[1]
}

match($0, /.*level_2_avgHESize=([0-9]+\.[0-9]+)/, m) {
    data["Level2AvgHESize"] = m[1]
}

match($0, /.*level_2_avgHEWeight=([0-9]+\.[0-9]+)/, m) {
    data["Level2AvgHEWeight"] = m[1]
}

END {
    yield()
}

function header() {
    printf "Graph,"
    printf "K,"
    printf "Seed,"
    printf "Cut,"
    printf "KM1,"
    printf "Epsilon,"
    printf "Balance,"
    printf "Time,"
    printf "NumNodes,"
    printf "NumMPIsPerNode,"
    printf "NumThreadsPerMPI,"
    printf "InitialKM1,"
    printf "InitialCut,"
    printf "InitialNumEdges,"
    printf "InitialNumNodes,"
    printf "NumMultilevels,"
    printf "TotalEdgeWeightOfCoarsestGraph,"
    printf "Level2NumHEs,"
    printf "Level2NumHNs,"
    printf "Level2AvgHESize,"
    printf "Level2AvgHEWeight,"
    printf "Failed\n"
}

function yield() {
    if (length(data) == 0) { return }

    printf "%s,", data["Graph"]
    printf "%d,", data["K"]
    printf "%d,", data["Seed"]
    printf "%d,", data["Cut"]
    printf "%d,", data["KM1"]
    printf "%f,", data["Epsilon"]
    printf "%f,", data["Balance"]
    printf "%f,", data["Time"]
    printf "%d,", data["NumNodes"]
    printf "%d,", data["NumMPIsPerNode"]
    printf "%d,", data["NumThreadsPerMPI"]
    printf "%d,", data["InitialKM1"]
    printf "%d,", data["InitialCut"]
    printf "%d,", data["InitialNumEdges"]
    printf "%d,", data["InitialNumNodes"]
    printf "%d,", data["NumMultilevels"]
    printf "%d,", data["TotalEdgeWeightOfCoarsestGraph"]
    printf "%d,", data["Level2NumHEs"]
    printf "%d,", data["Level2NumHNs"]
    printf "%f,", data["Level2AvgHESize"]
    printf "%f,", data["Level2AvgHEWeight"]
    printf "%d\n", (data["Time"] == "")

    reset()
}

function reset() {
    split("", data)
}
